---
grafana:
  enabled: true
  sidecar:
    dashboards:
      enabled: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Loki
          uid: loki
          type: loki
          url: http://{{ .Release.Name }}-loki-gateway
          isDefault: false
          jsonData:
            derivedFields:
              - name: traceId
                matcherRegex: 'trace_id=([a-f0-9]+)'
                url: '$${__value.raw}'
                datasourceUid: tempo
              - name: spanId
                matcherRegex: 'span_id=([a-f0-9]+)'
                url: '$${__value.raw}'
                datasourceUid: tempo
        - name: Mimir
          uid: prom
          type: prometheus
          url: http://{{ .Release.Name }}-mimir-nginx/prometheus
          isDefault: true
        - name: Tempo
          uid: tempo
          type: tempo
          url: http://{{ .Release.Name }}-tempo-query-frontend:3100
          isDefault: false
          jsonData:
            tracesToLogs:
              datasourceUid: loki # Data source alvo (Loki)
              tags: [ 'cluster', 'hostname', 'namespace', 'pod', 'service.name', 'service.namespace', 'container', 'job' ] # Tags para filtrar logs
              spanStartTimeShift: '-2m'  # Exemplo: buscar logs 0 minutos antes do início do span
              spanEndTimeShift: '2m'    # Exemplo: buscar logs até 2 minutos após o fim do span
              filterByTraceID: true     # Filtrar por trace ID
              filterBySpanID: true     # Filtrar por span ID (adicione se quiser)
              useCustomQuery: false     # Use consulta customizada se necessário
              query: ""                 # Consulta customizada (preencha se useCustomQuery: true)
            tracesToMetrics:
              datasourceUid: prom
            serviceMap:
              datasourceUid: prom

loki:
  enabled: true
  image:
    tag: "2.9.8"
  commonConfig:
    replication_factor: 1
  loki:
    server:
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
    retention_period: 96h # 4 dias (pode ser 24h, 168h, 30d, etc)
    schemaConfig:
      configs:
        - from: "2020-09-07"
          store: tsdb
          object_store: aws
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    storageConfig:
      tsdb_shipper:
        shared_store: s3
        active_index_directory: /var/loki/index
        cache_location: /var/loki/cache
        cache_ttl: 168h
      aws:
        s3: http://lgtm:supersecret@lgtm-minio:9000/loki
        s3forcepathstyle: true
        endpoint: lgtm-minio:9000
        insecure: true

mimir:
  enabled: true
  server:
    grpc_server_max_concurrent_streams: 1000
    grpc_server_max_recv_msg_size: 104857600
    grpc_server_max_send_msg_size: 104857600
  structuredConfig:
    limits:
      max_global_series_per_user: 10000000
      ingestion_rate: 150000
      ingestion_burst_size: 300000
      retention_period: 4d
  metaMonitoring:
    dashboards:
      enabled: true
    serviceMonitor:
      enabled: true
      labels:
        release: prometheus-operator
    prometheusRule:
      enabled: true
      mimirAlerts: true
      mimirRules: true
      labels:
        release: prometheus-operator
  compactor:
    resources:
      requests:
        cpu: 20m
  distributor:
    resources:
      requests:
        cpu: 20m
  ingester:
    replicas: 2
    zoneAwareReplication:
      enabled: false
    resources:
      requests:
        cpu: 20m
  overrides_exporter:
    resources:
      requests:
        cpu: 20m
  querier:
    replicas: 1
    resources:
      requests:
        cpu: 20m
  query_frontend:
    resources:
      requests:
        cpu: 20m
  query_scheduler:
    replicas: 1
    resources:
      requests:
        cpu: 20m
  store_gateway:
    zoneAwareReplication:
      enabled: false
    resources:
      requests:
        cpu: 20m
  minio:
    enabled: true
    rootPassword: supersecret
    rootUser: lgtm
    buckets:
      - name: mimir-tsdb
        policy: none
        purge: false
      - name: mimir-ruler
        policy: none
        purge: false
      - name: loki
        policy: none
        purge: false
      - name: tempo
        policy: none
        purge: false
  rollout_operator:
    resources:
      requests:
        cpu: 20m
  ruler:
    enabled: true
  alertmanager:
    enabled: false

tempo:
  enabled: true
  metaMonitoring:
    serviceMonitor:
      enabled: true
      labels:
        release: prometheus-operator
    prometheusRule:
      enabled: true
      labels:
        release: prometheus-operator
  storage:
    trace:
      retention: 96h
      backend: s3
      s3:
        access_key: lgtm
        bucket: tempo
        prefix: traces
        endpoint: lgtm-minio:9000
        insecure: true
        secret_key: supersecret
  ingester:
    replicas: 1
    config:
      replication_factor: 1
  traces:
    otlp:
      grpc:
        enabled: true
      http:
        enabled: true
  metricsGenerator:
    enabled: true
    config:
      storage:
        remote_write:
          - url: http://lgtm-mimir-nginx/api/v1/push
            send_exemplars: true
  global_overrides:
    defaults:
      metrics_generator:
        processors:
          - service-graphs
          - span-metrics